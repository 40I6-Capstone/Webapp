import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from './app/store';
import {cloneDeep} from 'lodash';
import { appendToPrevStates, appendToDiagPrevStates } from './features/SingleUGV/singleUGVSlice';
import { updateShape, setPaths, updateState, updateLoading, setNewUGV as setNewUGVDashboard, updateUGVPath, updateImg } from './features/Dashboard/dashboardSlice';
import { map } from 'lodash';

export enum ugvState {
  idle = "NODE_IDLE",
  leave = "NODE_PATH_LEAVE",
  return = "NODE_PATH_RETURN",
}

export interface pos {
    x: number;
    y: number;
}

export interface UGVInfo {
    id: number,
    name: string,
    state: string,
}

export interface UAVInfo {
  state: string,
  battery: number,
}

interface appState {
  ugvs: UGVInfo[];
  uav: UAVInfo;
};


const initialState: appState = {
  ugvs: [],
  uav: {
    state: 'Disconnected',
    battery: 0,
  }
};


export const appSlice = createSlice({
  name: 'app',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    appendToUGVs: (state, action: PayloadAction<UGVInfo>) => {
      const ugvs = cloneDeep(state.ugvs);
      
      ugvs.push(action.payload);

      state.ugvs = ugvs;
    },
    updateUGVState: (state, action: PayloadAction<{id: number, state: string}>) => {
      const ugvs = cloneDeep(state.ugvs);
      
      ugvs[action.payload.id].state = action.payload.state;

      state.ugvs = ugvs;
    },
    updateUAVState: (state, action: PayloadAction<string>) => {
      const uav = cloneDeep(state.uav);
      
      uav.state = action.payload;

      state.uav = uav;
    },
    updateUAVBat: (state, action: PayloadAction<number>) => {
      const uav = cloneDeep(state.uav);
      
      uav.battery = action.payload;

      state.uav = uav;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { 
  appendToUGVs,
  updateUGVState,
  updateUAVState,
  updateUAVBat,
} = appSlice.actions;

export const handleMessage =
  (msgStr: string): AppThunk =>
  (dispatch, getState) => {
    const state = getState();
    const msg = JSON.parse(msgStr);
    switch(msg.type) {
      case 'scout':
        dispatch(updateShape({ vertices: msg.data.vertices, midpoints: msg.data.midpoints, contour: map(msg.data.contour,(a)=>a[0]) }));
        dispatch(setPaths(msg.data.paths));
        dispatch(updateState());
        dispatch(updateLoading(false));
        break;
      case 'imageUpdate':
        dispatch(updateImg(msg.data));
        break;
      case 'ugvAdded':
        dispatch(appendToUGVs(msg.data));
        dispatch(setNewUGVDashboard(msg.data.id)) 
        break;
      case 'ugvState':
        const len = state.dashboard.ugvPaths[msg.data.id].length;
        if(len === 0 || (state.dashboard.ugvPaths[msg.data.id][len-1][0] !== msg.data.data.x && state.dashboard.ugvPaths[msg.data.id][len-1][1] !== msg.data.data.y ))
          dispatch(updateUGVPath({id: msg.data.id, path: [msg.data.data.x, msg.data.data.y]}));
        if(state.app.ugvs[msg.data.id].state !== msg.data.data.State)
          dispatch(updateUGVState({id:msg.data.id, state:msg.data.data.State}));
        if(msg.data.id == state.singleUGV.id){
          dispatch(appendToPrevStates(msg.data.data));
        }
        break;
      case 'ugvDiagState':
        if(msg.data.id == state.singleUGV.id){
          dispatch(appendToDiagPrevStates(msg.data.data));
        }
        break;
      case 'uavConnected':
        dispatch(updateUAVState('Connected'));
        break;
      case 'uavDisconnected':
        dispatch(updateUAVState('Disconnected'));
        break;
      case 'updateBatState':
        dispatch(updateUAVBat(msg.data));
        break;
    }  
  };

export default appSlice.reducer;
