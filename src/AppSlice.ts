import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from './app/store';
import {cloneDeep} from 'lodash';
import { appendToPrevStates } from './features/SingleUGV/singleUGVSlice';
import { updateShape, setPaths, updateState, updateLoading } from './features/Dashboard/dashboardSlice';
import { map } from 'lodash';

export interface pos {
    x: number;
    y: number;
}
interface ugvData {
    id: number,
    name: string,
    state: string,
}

interface appState {
  ugvs: ugvData[];
};


const initialState: appState = {
  ugvs: [],
};


export const appSlice = createSlice({
  name: 'app',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    appendToUGVs: (state, action: PayloadAction<ugvData>) => {
      const ugvs = cloneDeep(state.ugvs);
      
      ugvs.push(action.payload);

      state.ugvs = ugvs;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { 
  appendToUGVs,
} = appSlice.actions;

export const handleMessage =
  (msgStr: string): AppThunk =>
  (dispatch, getState) => {
    const state = getState();
    const msg = JSON.parse(msgStr);
    console.log("Got message", msg);
    switch(msg.type) {
        case 'scout':
          dispatch(updateShape({ vertices: msg.data.vertices, midpoints: msg.data.midpoints, contour: map(msg.data.contour,(a)=>a[0]) }));
          dispatch(setPaths(msg.data.paths));
          dispatch(updateState());
          dispatch(updateLoading(false));
          break;
        case 'ugvAdded':
          dispatch(appendToUGVs(msg.data)); 
          break;
        case 'ugvData':
          if(msg.data.id == state.singleUGV.id){
            dispatch(appendToPrevStates(msg.data.data));
          }
    }  
  };

export default appSlice.reducer;
